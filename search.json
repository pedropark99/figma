[{"path":"https://pedropark99.github.io/figma/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Pedro Duarte Faria Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://pedropark99.github.io/figma/articles/figma.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"Get your Figma file into R","text":"might Figma files want bring R, analyze, , use visual attributes objects file compose layout want use RMarkdown/Quarto file. figma package allows . uses Figma API bring Figma file data R. , sending HTTP request Figma API collect Figma data, , parses data R native object, can easily use R process. order use Figma API, need collect two key variables file credentials. : file_key: ID (‚Äúkey‚Äù) identifies Figma file; token: personal access token Figma platform; However, want use get_figma_page(), need collect third information, node_id, ID identifies canvas/page Figma file. talk ID section 1.2.","code":"library(figma)"},{"path":"https://pedropark99.github.io/figma/articles/figma.html","id":"is-always-nice-to-read-the-official-figma-api-documentation","dir":"Articles","previous_headings":"1. Introduction","what":"1.1 Is always nice to read the official Figma API documentation","title":"Get your Figma file into R","text":"information described vignette comes official Figma API documentation, order learn specific subject, always good idea read subject directly source üòâ. give direct links specific parts documentation throughout vignette, want read complete documentation, can access link.","code":""},{"path":"https://pedropark99.github.io/figma/articles/figma.html","id":"finding-the-key-or-id-of-your-figma-file","dir":"Articles","previous_headings":"1. Introduction","what":"1.2 Finding the key (or ID) of your Figma file","title":"Get your Figma file into R","text":"file key (file key), random text identifies Figma file. Figma API uses key identify specific Figma file requesting . can find key (ID) Figma file looking URL web browser, access Figma file Figma platform. example, lets use Figma file entitled Untitled (make joke üòÖ): example Figma file look top web browser, following URL: https://www.figma.com/file/hch8YlkIrYbU3raDzjPvCz/Untitled?node-id=0%3A1 key (ID) file \"hch8YlkIrYbU3raDzjPvCz\". means URL every Figma file composed structure. order use functions figma package, always collect :file_key portion URL, get key file. https://www.figma.com/file/:file_key/:file_title?:node_id also means , want use get_figma_page(), need collect :node_id portion URL well. portion gives node ID, , words, ID identifies canvas/page . portion URL usually key-value pair, ID node equal sign (=). example, looking URL example gave , know canvas/page page node_id = \"0%3A1\".","code":""},{"path":"https://pedropark99.github.io/figma/articles/figma.html","id":"get-your-personal-access-token","dir":"Articles","previous_headings":"1. Introduction","what":"1.3 Get your personal access token","title":"Get your Figma file into R","text":"can read authentication process use personal access tokens, section ‚ÄúAuthentication‚Äù Figma API documentation. personal access token, can create one Figma platform. Just log platform, click Settings section, like image : Settings Figma platform , look Personal access token section settings, like image . can create personal access tokens. Just add description (‚Äúalias‚Äù) token, press Enter. pop-appear screen new token. Personal access token section settings Figma API uses secret token identify , know requesting file, someone else. , important keep token secret, someone , can access Figma files API. standard way store passwords, store .Renviron file, many methods good alternatives . good place start vignette Hadley Wickham.","code":""},{"path":"https://pedropark99.github.io/figma/articles/figma.html","id":"use-get_figma_file-to-get-your-figma-file","dir":"Articles","previous_headings":"1. Introduction","what":"1.4 Use get_figma_file() to get your Figma file","title":"Get your Figma file into R","text":"Now key (ID) identifies Figma file, personal token identifies , can use get_figma_file() get Figma file:","code":"file_key <- \"hch8YlkIrYbU3raDzjPvCz\" # Insert your personal token: token <- \"Your personal token ...\"  result <- figma::get_figma_file(   file_key, token ) # A `response` object: print(result) Response [https://api.figma.com/v1/files/hch8YlkIrYbU3raDzjPvCz]   Date: 2022-10-29 16:56   Status: 200   Content-Type: application/json; charset=utf-8   Size: 4.58 kB {\"document\":{\"id\":\"0:0\",\"name\":\"Document\",\"type\":\"DOCUMENT\",\"children\":[{\"id\":\"0:1\",\"name\":\"Page 1\",\"typ..."},{"path":"https://pedropark99.github.io/figma/articles/figma.html","id":"using-the-response-object","dir":"Articles","previous_headings":"1. Introduction","what":"1.5 Using the response object","title":"Get your Figma file into R","text":"functions figma package philosophy giving (default) raw unprocessed result possible user. good debugging situations, gives available information user. However, unprocessed result usually strucutured friendly useful format, makes analysis transformation pipelines harder complex. get_figma_file() comes output formats available .output_format argument, describe later. give useful example, can access exact response object shown example section 1.4. response object stored data object called untitled_file, can access data(\"untitled_file\", package = \"figma\"). object untitled_file contains data Figma file shown section 1.2. can see result , response object just simple R list many elements: Figma file data content element, , use command untitled_file$content access . , default, Figma API sends data Figma file raw bytes: need convert bytes useful format like JSON object, character vector, pure text. conversion, recommend use httr::content() function. default, function converts raw bytes R list. canvas/pages nodes list_of_nodes$document$children element, objects nodes children element canvas/page node (e.g.¬† list_of_nodes$document$children[[1]][[\"children\"]]).","code":"str(untitled_file) #> List of 10 #>  $ url        : chr \"https://api.figma.com/v1/files/hch8YlkIrYbU3raDzjPvCz\" #>  $ status_code: int 200 #>  $ headers    :List of 12 #>   ..$ content-type                : chr \"application/json; charset=utf-8\" #>   ..$ date                        : chr \"Sat, 29 Oct 2022 16:56:50 GMT\" #>   ..$ access-control-allow-origin : chr \"*\" #>   ..$ access-control-allow-headers: chr \"Content-Type, X-Figma-Token, Authorization\" #>   ..$ cache-control               : chr \"no-cache, no-store\" #>   ..$ vary                        : chr \"X-Figma-Token,Authorization\" #>   ..$ x-cache                     : chr \"Miss from cloudfront\" #>   ..$ via                         : chr \"1.1 88c333921d5c405e037b84bb8c2dc33e.cloudfront.net (CloudFront)\" #>   ..$ x-amz-cf-pop                : chr \"GRU3-P1\" #>   ..$ alt-svc                     : chr \"h3=\\\":443\\\"; ma=86400\" #>   ..$ x-amz-cf-id                 : chr \"gjOnBhIpDZxekWpx-zbAwqxsOLunePv8LSTfdf-elMQNLXpyAVSuXw==\" #>   ..$ strict-transport-security   : chr \"max-age=31536000; includeSubDomains; preload\" #>   ..- attr(*, \"class\")= chr [1:2] \"insensitive\" \"list\" #>  $ all_headers:List of 1 #>   ..$ :List of 3 #>   .. ..$ status : int 200 #>   .. ..$ version: chr \"HTTP/2\" #>   .. ..$ headers:List of 12 #>   .. .. ..$ content-type                : chr \"application/json; charset=utf-8\" #>   .. .. ..$ date                        : chr \"Sat, 29 Oct 2022 16:56:50 GMT\" #>   .. .. ..$ access-control-allow-origin : chr \"*\" #>   .. .. ..$ access-control-allow-headers: chr \"Content-Type, X-Figma-Token, Authorization\" #>   .. .. ..$ cache-control               : chr \"no-cache, no-store\" #>   .. .. ..$ vary                        : chr \"X-Figma-Token,Authorization\" #>   .. .. ..$ x-cache                     : chr \"Miss from cloudfront\" #>   .. .. ..$ via                         : chr \"1.1 88c333921d5c405e037b84bb8c2dc33e.cloudfront.net (CloudFront)\" #>   .. .. ..$ x-amz-cf-pop                : chr \"GRU3-P1\" #>   .. .. ..$ alt-svc                     : chr \"h3=\\\":443\\\"; ma=86400\" #>   .. .. ..$ x-amz-cf-id                 : chr \"gjOnBhIpDZxekWpx-zbAwqxsOLunePv8LSTfdf-elMQNLXpyAVSuXw==\" #>   .. .. ..$ strict-transport-security   : chr \"max-age=31536000; includeSubDomains; preload\" #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"insensitive\" \"list\" #>  $ cookies    :'data.frame': 0 obs. of  7 variables: #>   ..$ domain    : logi(0)  #>   ..$ flag      : logi(0)  #>   ..$ path      : logi(0)  #>   ..$ secure    : logi(0)  #>   ..$ expiration: 'POSIXct' num(0)  #>   ..$ name      : logi(0)  #>   ..$ value     : logi(0)  #>  $ content    : raw [1:4582] 7b 22 64 6f ... #>  $ date       : POSIXct[1:1], format: \"2022-10-29 16:56:50\" #>  $ times      : Named num [1:6] 0 0.173 0.275 0.378 1.606 ... #>   ..- attr(*, \"names\")= chr [1:6] \"redirect\" \"namelookup\" \"connect\" \"pretransfer\" ... #>  $ request    :List of 5 #>   ..$ method : chr \"GET\" #>   ..$ url    : chr \"https://api.figma.com/v1/files/hch8YlkIrYbU3raDzjPvCz\" #>   ..$ fields : NULL #>   ..$ options:List of 2 #>   .. ..$ useragent: chr \"libcurl/7.68.0 r-curl/4.3.2 httr/1.4.3\" #>   .. ..$ httpget  : logi TRUE #>   ..$ output : list() #>   .. ..- attr(*, \"class\")= chr [1:2] \"write_memory\" \"write_function\" #>   ..- attr(*, \"class\")= chr \"request\" #>  $ handle     :Class 'curl_handle' <externalptr>  #>  - attr(*, \"class\")= chr \"response\" head(untitled_file$content) #> [1] 7b 22 64 6f 63 75 list_of_nodes <- httr::content(untitled_file) names(list_of_nodes) #>  [1] \"document\"      \"components\"    \"componentSets\" \"schemaVersion\" #>  [5] \"styles\"        \"name\"          \"lastModified\"  \"thumbnailUrl\"  #>  [9] \"version\"       \"role\"          \"editorType\"    \"linkAccess\" first_canvas_node <- list_of_nodes$document$children[[1]] first_object_node <- first_canvas_node[[\"children\"]][[1]]"},{"path":"https://pedropark99.github.io/figma/articles/figma.html","id":"output-a-figma-document-object","dir":"Articles","previous_headings":"1. Introduction","what":"1.6 Output a Figma Document object","title":"Get your Figma file into R","text":".output_argument = \"figma_document\", get_figma_file() output Figma Document object, instead response object. , analogously: object just R list class figma_document. main differences object response object : figma_document object data Figma file (.e.¬†data HTTP request made Figma API); data Figma file little organized figma_document object; figma_document object, document metadata Figma file (like name/title file, last time modified, components, etc‚Ä¶) available document element: Furthermore, can get data canvas/page (respective objects) canvas element: data objects present canvas found objects element:","code":"file_key <- \"hch8YlkIrYbU3raDzjPvCz\" # Insert your personal token: token <- \"Your personal token ...\"  figma_document <- figma::get_figma_file(   file_key, token,   .output_format = \"figma_document\" ) # A `figma_document` object: print(figma_document) figma_document <- figma::as_figma_document(untitled_file) figma_document #> <Figma Document> #>  #>  * Number of canvas: 2  #>  * Number of objects in each canvas: 3 2 str(figma_document$document) #> List of 13 #>  $ id           : chr \"0:0\" #>  $ type         : chr \"DOCUMENT\" #>  $ name         : chr \"Untitled\" #>  $ components   : Named list() #>  $ componentSets: Named list() #>  $ styles       : Named list() #>  $ schemaVersion: int 0 #>  $ lastModified : chr \"2022-10-25T00:36:59Z\" #>  $ thumbnailUrl : chr \"https://s3-alpha-sig.figma.com/thumbnails/065f8c7c-af9c-4f7f-bb80-e1c9ad6b62b5?Expires=1667779200&Signature=Gz5\"| __truncated__ #>  $ version      : chr \"2514657369\" #>  $ role         : chr \"owner\" #>  $ editorType   : chr \"figma\" #>  $ linkAccess   : chr \"view\" names(figma_document$canvas[[1]]) #> [1] \"id\"                   \"name\"                 \"type\"                 #> [4] \"objects\"              \"backgroundColor\"      \"prototypeStartNodeID\" #> [7] \"flowStartingPoints\"   \"prototypeDevice\" first_canvas_node <- figma_document$canvas[[1]] first_object_node <- first_canvas_node$objects[[1]] str(first_object_node) #> List of 12 #>  $ id                  : chr \"1:2\" #>  $ name                : chr \"Background\" #>  $ type                : chr \"RECTANGLE\" #>  $ blendMode           : chr \"PASS_THROUGH\" #>  $ absoluteBoundingBox :List of 4 #>   ..$ x     : num -379 #>   ..$ y     : num -277 #>   ..$ width : num 793 #>   ..$ height: num 549 #>  $ absoluteRenderBounds:List of 4 #>   ..$ x     : num -379 #>   ..$ y     : num -277 #>   ..$ width : num 793 #>   ..$ height: num 549 #>  $ constraints         :List of 2 #>   ..$ vertical  : chr \"TOP\" #>   ..$ horizontal: chr \"LEFT\" #>  $ fills               :List of 1 #>   ..$ :List of 3 #>   .. ..$ blendMode: chr \"NORMAL\" #>   .. ..$ type     : chr \"SOLID\" #>   .. ..$ color    :List of 4 #>   .. .. ..$ r: num 0.851 #>   .. .. ..$ g: num 0.851 #>   .. .. ..$ b: num 0.851 #>   .. .. ..$ a: num 1 #>  $ strokes             : list() #>  $ strokeWeight        : num 1 #>  $ strokeAlign         : chr \"INSIDE\" #>  $ effects             : list()"},{"path":"https://pedropark99.github.io/figma/articles/figma.html","id":"output-a-tibbletibble-object","dir":"Articles","previous_headings":"1. Introduction","what":"1.7 Output a tibble::tibble() object","title":"Get your Figma file into R","text":".output_format = \"tibble, get_figma_file() output tibble::tibble() object, instead response object. probably useful friendly output format can use: , analogously: row resulting tibble, object present one canvas Figma file. example, Figma file stored untitled_file 2 canvas/pages: 3 objects first canvas, 2 objects second canvas. 3 objects + 2 objects = 5 rows output tibble. columns canvas_ prefix stores metadata canvas object corresponding row . columns object_ prefix stores data object corresponding row. object can different type (can RECTANGLE, TEXT, VECTOR, etc.), different types objects usually different kinds attributes. attributes object stored object_attributes column.","code":"file_key <- \"hch8YlkIrYbU3raDzjPvCz\" # Insert your personal token: token <- \"Your personal token ...\"  tibble <- figma::get_figma_file(   file_key, token,   .output_format = \"tibble\" ) # A `tibble` object: print(tibble) tibble <- figma::as_tibble(untitled_file) tibble #> # A tibble: 5 √ó 7 #>   canvas_id canvas_name canvas_type object_id object_name   objec‚Ä¶¬π object_attrs #>   <chr>     <chr>       <chr>       <chr>     <chr>         <chr>   <list>       #> 1 0:1       Page 1      CANVAS      1:2       Background    RECTAN‚Ä¶ <named list> #> 2 0:1       Page 1      CANVAS      5:2       Paragraph     TEXT    <named list> #> 3 0:1       Page 1      CANVAS      5:3       Arrow         VECTOR  <named list> #> 4 5:4       Page 2      CANVAS      5:5       BackgroundPa‚Ä¶ RECTAN‚Ä¶ <named list> #> 5 5:4       Page 2      CANVAS      5:6       Texto da p√°g‚Ä¶ TEXT    <named list> #> # ‚Ä¶ with abbreviated variable name ¬π‚Äãobject_type"},{"path":"https://pedropark99.github.io/figma/articles/http-errors.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Common HTTP errors in the Figma API","text":"get data Figma file, functions package make HTTP request Figma API. request can fail number reasons, happen, called raise error report user, kind error message Figma API returned. HTTP error means server fulfill HTTP request made. context figma package, usually request data specific Figma file servers Figma platform, HTTP error occurs, means servers Figma deliver data Figma file . Every successful HTTP request occurs server respond HTTP status code equal 200. , every HTTP request make Figma servers HTTP status code different 200 HTTP error.","code":""},{"path":"https://pedropark99.github.io/figma/articles/http-errors.html","id":"most-common-http-errors","dir":"Articles","previous_headings":"","what":"Most common HTTP errors","title":"Common HTTP errors in the Figma API","text":"common HTTP errors returned Figma API status codes 400, 404 403. status code 400 usually signal internal bug figma package, (possible) report authors registering issue official repository package. hand, status codes 404 403 usually result user mistake key variables provided functions package.","code":"library(figma)"},{"path":"https://pedropark99.github.io/figma/articles/http-errors.html","id":"wrong-node-id-in-figmaget_figma_page-results-in-status-code-400","dir":"Articles","previous_headings":"Most common HTTP errors","what":"Wrong node ID in figma::get_figma_page() results in status code 400","title":"Common HTTP errors in the Figma API","text":"use figma::get_figma_page(), returns HTTP error status code 400, possible error caused mistake node ID provided function. words, Figma API returns status code 400 figma::get_figma_page(), chance provided wrong invalid node ID API. example, code uses clearly wrong node ID, valid personal access token valid file key.","code":"node_id <- \"wrongID\" file_key <- \"hch8YlkIrYbU3raDzjPvCz\" token <- \"My valid personal access token... \" result <- get_figma_page(   file_key, token, node_id ) Error in `get_figma_page()`: ! HTTP Error:  ‚Ä¢ * URL used in the request: https://api.figma.com/v1/files/hch8YlkIrYbU3raDzjPvCz/nodes?ids=wrong ‚Ä¢ * Status code returned by the API: 400 ‚Ä¢ * Error message returned by the API: ID wrongID is not a valid node_id ‚Ä¢ * Headers returned by the API: List of 3  $ status : int 400  $ version: chr \"HTTP/2\"  $ headers:List of 13   ..$ content-type                : chr \"application/json; charset=utf-8\"   ..$ content-length              : chr \"54\"   ..$ date                        : chr \"Sun, 30 Oct 2022 23:10:49 GMT\"   ..$ access-control-allow-origin : chr \"*\"   ..$ access-control-allow-headers: chr \"Content-Type, X-Figma-Token, Authorization\"   ..$ cache-control               : chr \"no-cache, no-store\"   ..$ vary                        : chr \"X-Figma-Token,Authorization\"   ..$ x-cache                     : chr \"Error from cloudfront\"   ..$ via                         : chr \"1.1 a5f39a4680587f7042bdbc4ff6cd417c.cloudfront.net (CloudFront)\"   ..$ x-amz-cf-pop                : chr \"GRU3-P1\"   ..$ alt-svc                     : chr \"h3=\\\":443\\\"; ma=86400\"   ..$ x-amz-cf-id                 : chr \"74-bxpmIzbo3clyliImc4IZCaVtxgW-VCFlMN9Na8Ixva1caM8JENw==\"   ..$ strict-transport-security   : chr \"max-age=31536000; includeSubDomains; preload\"   ..- attr(*, \"class\")= chr [1:2] \"insensitive\" \"list\" Run `rlang::last_error()` to see where the error occurred."},{"path":"https://pedropark99.github.io/figma/articles/http-errors.html","id":"file-not-found","dir":"Articles","previous_headings":"Most common HTTP errors","what":"404: File not found","title":"Common HTTP errors in the Figma API","text":"Figma API returns status code equal 404, means servers Figma find file referred file key (file ID) provided. words, probably provided incorrect file key (file ID) ‚Äôs function. example , give valid personal access token, incorrect file key (file ID). result, Figma servers respond HTTP request HTTP status code equal 404, indicating find Figma file identified key :","code":"file_key <- \"This key does not exist\" token <- \"A valid personal token ...\"  result <- figma::get_figma_file(   file_key, token ) Error in `figma::get_figma_file()`: ! HTTP Error:  * URL used in the request: https://api.figma.com/v1/files/This key does not exist * Status code returned by the API: 404 * Error message returned by the API: Not found * Headers returned by the API: List of 3  $ status : int 404  $ version: chr \"HTTP/2\"  $ headers:List of 13   ..$ content-type                : chr \"application/json; charset=utf-8\"   ..$ content-length              : chr \"32\"   ..$ date                        : chr \"Sun, 30 Oct 2022 01:36:12 GMT\"   ..$ access-control-allow-origin : chr \"*\"   ..$ access-control-allow-headers: chr \"Content-Type, X-Figma-Token, Authorization\"   ..$ cache-control               : chr \"no-cache, no-store\"   ..$ vary                        : chr \"X-Figma-Token,Authorization\"   ..$ x-cache                     : chr \"Error from cloudfront\"   ..$ via                         : chr \"1.1 1854e234bfccfb7a387b67a7feff26d2.cloudfront.net (CloudFront)\"   ..$ x-amz-cf-pop                : chr \"GRU3-P1\"   ..$ alt-svc                     : chr \"h3=\\\":443\\\"; ma=86400\"   ..$ x-amz-cf-id                 : chr \"HE9e153j-uftva_tydKpb6kibQM5Kcw62URWoxsC4zoYSSmNnX-VOA==\"   ..$ strict-transport-security   : chr \"max-age=31536000; includeSubDomains; preload\"   ..- attr(*, \"class\")= chr [1:2] \"insensitive\" \"list\" Run `rlang::last_error()` to see where the error occurred."},{"path":"https://pedropark99.github.io/figma/articles/http-errors.html","id":"invalid-token","dir":"Articles","previous_headings":"Most common HTTP errors","what":"403: Invalid token","title":"Common HTTP errors in the Figma API","text":"Figma API returns status code equal 403, means provided invalid personal token. means probably forgot correctly set personal token, maybe, unintentionally forgot one character token. example , use valid file key, , incorrect personal access token. deliver key variables figma::get_figma_file(), makes HTTP request Figma API incorrect token, Figma servers respond request HTTP error equal 403.","code":"file_key <- \"hch8YlkIrYbU3raDzjPvCz\" token <- \"This is an incorrect token\"  result <- figma::get_figma_file(   file_key, token ) Error in `figma::get_figma_file()`: ! HTTP Error:  * URL used in the request: https://api.figma.com/v1/files/hch8YlkIrYbU3raDzjPvCz * Status code returned by the API: 403 * Error message returned by the API: Invalid token * Headers returned by the API: List of 3  $ status : int 403  $ version: chr \"HTTP/2\"  $ headers:List of 13   ..$ content-type                : chr \"application/json; charset=utf-8\"   ..$ content-length              : chr \"36\"   ..$ date                        : chr \"Sun, 30 Oct 2022 01:32:20 GMT\"   ..$ access-control-allow-origin : chr \"*\"   ..$ access-control-allow-headers: chr \"Content-Type, X-Figma-Token, Authorization\"   ..$ cache-control               : chr \"no-cache, no-store\"   ..$ vary                        : chr \"X-Figma-Token,Authorization\"   ..$ x-cache                     : chr \"Error from cloudfront\"   ..$ via                         : chr \"1.1 f88bd4c15622473fc18eef7d15f4b8d4.cloudfront.net (CloudFront)\"   ..$ x-amz-cf-pop                : chr \"GRU3-P1\"   ..$ alt-svc                     : chr \"h3=\\\":443\\\"; ma=86400\"   ..$ x-amz-cf-id                 : chr \"CClnH5QCZF1wC31us3POW1TWxoODMcriBq0n29_P-y6Q2KYWa6Zw8A==\"   ..$ strict-transport-security   : chr \"max-age=31536000; includeSubDomains; preload\"   ..- attr(*, \"class\")= chr [1:2] \"insensitive\" \"list\" Run `rlang::last_error()` to see where the error occurred."},{"path":"https://pedropark99.github.io/figma/articles/http-errors.html","id":"other-possible-http-errors","dir":"Articles","previous_headings":"","what":"Other possible HTTP errors","title":"Common HTTP errors in the Figma API","text":"can read section ‚ÄúErrors‚Äù official Figma API documentation want know kinds HTTP errors can returned API. date writing document, official documentation describes two possible HTTP errors, HTTP status codes 429 500. status code 429 means ‚Äúrate limit‚Äù server, error occurs, much choice trying request minutes. get status code 500 instead, usually occurs large image render requests, may time Figma server.","code":""},{"path":"https://pedropark99.github.io/figma/articles/quarto-css.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Building custom CSS from the Figma API","text":"Hello! vignette, show basic example use data Figma API, produce custom CSS code, use design product, website. First, lets import package. , quarto_website object available like :","code":"library(figma) quarto_website Response [https://api.figma.com/v1/files/Y7jJJ5KHcG7hjuZVeRPZWq]   Date: 2022-12-08 11:56   Status: 200   Content-Type: application/json; charset=utf-8   Size: 11.5 kB {\"document\":{\"id\":\"0:0\",\"name\":\"Document\",\"type\":\"DOCUMENT\",\"scrollBehavior\":\"SCROLLS\"..."},{"path":"https://pedropark99.github.io/figma/articles/quarto-css.html","id":"about-the-quarto_website-object","dir":"Articles","previous_headings":"","what":"About the quarto_website object","title":"Building custom CSS from the Figma API","text":"quarto_website object response object produced figma::get_figma_file(), , contains data Figma file. Figma file, drawn homepage Quarto Website. screenshot Figma file: screenshot Figma file named ‚ÄúQuarto-Website‚Äù","code":""},{"path":"https://pedropark99.github.io/figma/articles/quarto-css.html","id":"lets-reshape-the-object","dir":"Articles","previous_headings":"","what":"Lets reshape the object","title":"Building custom CSS from the Figma API","text":"now, response object format hard work . lets transform useful format. First, lets convert figma_document object figma::as_figma_document(), get better structure Figma file. can see result , Figma file one canvas/page, 11 objects drawn : , separate objects page separate object, like : Now, objects stores data 11 objects drawn Figma file. example, can see name attribute first object drawn canvas, like :","code":"fd <- figma::as_figma_document(quarto_website) fd #> <Figma Document> #>  #>  * Number of canvas: 1  #>  * Number of objects in each canvas: 11 objects <- fd$canvas[[1]][[\"objects\"]] length(objects) #> [1] 11 objects[[1]][[\"name\"]] #> [1] \"quarto-container\""},{"path":"https://pedropark99.github.io/figma/articles/quarto-css.html","id":"the-nav-bar-component-as-an-example","dir":"Articles","previous_headings":"","what":"The nav-bar component as an example","title":"Building custom CSS from the Figma API","text":"Quarto websites usually HTML element named navbar, represents top navigation bar website. ‚Äúnav-bar‚Äù second object drawn ‚ÄúQuarto-Website‚Äù Figma file. lets separate object take closer look :","code":"nav_bar <- objects[[2]] str(nav_bar) #> List of 13 #>  $ id                  : chr \"49:3\" #>  $ name                : chr \"navbar\" #>  $ type                : chr \"RECTANGLE\" #>  $ scrollBehavior      : chr \"SCROLLS\" #>  $ blendMode           : chr \"PASS_THROUGH\" #>  $ absoluteBoundingBox :List of 4 #>   ..$ x     : num -307 #>   ..$ y     : num -286 #>   ..$ width : num 1919 #>   ..$ height: num 67 #>  $ absoluteRenderBounds:List of 4 #>   ..$ x     : num -307 #>   ..$ y     : num -286 #>   ..$ width : num 1919 #>   ..$ height: num 67 #>  $ constraints         :List of 2 #>   ..$ vertical  : chr \"TOP\" #>   ..$ horizontal: chr \"LEFT\" #>  $ fills               :List of 1 #>   ..$ :List of 3 #>   .. ..$ blendMode: chr \"NORMAL\" #>   .. ..$ type     : chr \"SOLID\" #>   .. ..$ color    :List of 4 #>   .. .. ..$ r: num 0.153 #>   .. .. ..$ g: num 0.502 #>   .. .. ..$ b: num 0.89 #>   .. .. ..$ a: num 1 #>  $ strokes             : list() #>  $ strokeWeight        : num 1 #>  $ strokeAlign         : chr \"INSIDE\" #>  $ effects             : list()"},{"path":"https://pedropark99.github.io/figma/articles/quarto-css.html","id":"extracting-the-css-selector","dir":"Articles","previous_headings":"The nav-bar component as an example","what":"Extracting the CSS selector","title":"Building custom CSS from the Figma API","text":"first effort, can build code necessary transform name Figma object CSS selector, like :","code":"css_selector <- function(object) {   name <- object$name   prefix <- \".\"   css <- paste0(prefix, name)   return(css) }  css_selector(nav_bar) #> [1] \".navbar\""},{"path":"https://pedropark99.github.io/figma/articles/quarto-css.html","id":"getting-the-background-color","dir":"Articles","previous_headings":"The nav-bar component as an example","what":"Getting the background color","title":"Building custom CSS from the Figma API","text":"Now name CSS selector, can build ‚Äúbackground color‚Äù processor, build background-color CSS attribute. color object usually fills element. colors Figma translated RGBA (red-green-blue-alpha) configuration. means every ‚Äúcolor‚Äù element Figma API‚Äôs data always four elements inside : r (red), g (green), b (blue) (alpha). one store real number 0 1. want convert four numbers hex code represents color, use rgb() function.","code":"bck_color <- function(object) {   color <- object$fills[[1]][[\"color\"]]   as_hex <- rgb(     color$r, color$g, color$b, color$a,     maxColorValue = 1   )   return(as_hex) }  bck_color(nav_bar) #> [1] \"#2780E3FF\""},{"path":"https://pedropark99.github.io/figma/articles/quarto-css.html","id":"building-an-attribute-processor","dir":"Articles","previous_headings":"The nav-bar component as an example","what":"Building an attribute processor","title":"Building custom CSS from the Figma API","text":"Now, want build function transform list CSS attributes (list key-value pairs) CSS statement (CSS declaration prefer). details, function output CSS code following format: function receive selector first input. CSS selector used CSS statement. function put selector beginning statement, right opening curly brace. Furthermore, function receive second input, list CSS attibutes added body CSS statement. element list, another list two elements (key value). css_statement() function, can easily build CSS code like :","code":"selector {   key=value;   ...more CSS attibutes } css_statement <- function(selector, attributes) {   key_values <- vector(\"character\", length(attributes))   for (i in seq_along(attributes)) {     key <- attributes[[i]][[\"key\"]]     value <- attributes[[i]][[\"value\"]]     kv <- sprintf(\"\\t%s: %s;\", key, value)     key_values[i] <- kv   }   body <- paste(key_values, collapse = \"\\n\")   first_line <- sprintf(\"%s {\", selector)   # Add curly braces   body <- paste(     first_line, body, \"}\",      sep = \"\\n\", collapse = \"\"   )   return(body) } attrs <- list(   list(key = \"text-align\", value = \"center\"),   list(key = \"color\", value = \"purple\"),   list(key = \"width\", value = \"100px\") )  css_statement(\"body\", attrs) |> cat() #> body { #>  text-align: center; #>  color: purple; #>  width: 100px; #> }"},{"path":"https://pedropark99.github.io/figma/articles/quarto-css.html","id":"the-css-code-for-background-color","dir":"Articles","previous_headings":"The nav-bar component as an example","what":"The CSS code for background color","title":"Building custom CSS from the Figma API","text":"last, can use css_bck_color() function build necessary CSS code specify background color navbar HTML element, Quarto website. example , ‚Äôm exposing output CSS code directly terminal cat(). , use cat() save CSS code file, e.g.¬†cat(file = \"style.css\").","code":"css_bck_color <- function(object) {   selector <- css_selector(object)   color <- bck_color(object)   color_specs <- list(     list(key = \"background-color\", value = color)   )   css_statement <- css_statement(selector, color_specs)   return(css_statement) }  nav_bar |>    css_bck_color() |>    cat() #> .navbar { #>  background-color: #2780E3FF; #> }"},{"path":"https://pedropark99.github.io/figma/articles/quarto-css.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Building custom CSS from the Figma API","text":"data Figma API, allows us build bridge visual feedback (.e.¬†design) code output (.e.¬†necessary code build design). example might limited, can useful analysts want make better connection design developers team, deliver products faster.","code":""},{"path":"https://pedropark99.github.io/figma/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pedro Faria. Author, maintainer, copyright holder.","code":""},{"path":"https://pedropark99.github.io/figma/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Faria P (2022). figma: Web Client/Wrapper 'Figma API'. https://github.com/pedropark99/figma, https://pedropark99.github.io/figma/.","code":"@Manual{,   title = {figma: Web Client/Wrapper to the 'Figma API'},   author = {Pedro Faria},   year = {2022},   note = {https://github.com/pedropark99/figma, https://pedropark99.github.io/figma/}, }"},{"path":[]},{"path":"https://pedropark99.github.io/figma/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Web Client/Wrapper to the Figma API","text":"aim figma package provide easy--use client/wrapper Figma API. allows bring data Figma file R session. includes data objects drawn file, respective canvas/page metadata. kind data, can maybe build custom automated layout documents, create automated pipeline build design content clients. Key features package: Get data Figma file, specific canvas/page Figma file, just metadata file; Functions figma package can output data tibble::tibble() object; Returns raw contents HTTP response default, give freedom information user;","code":""},{"path":"https://pedropark99.github.io/figma/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Web Client/Wrapper to the Figma API","text":"get current version CRAN: get current development version github:","code":"install.packages(\"figma\") devtools::install_github(\"pedropark99/figma\")"},{"path":"https://pedropark99.github.io/figma/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Web Client/Wrapper to the Figma API","text":"good place start figma package, read main vignette (can access vignette(\"figma\")). let‚Äôs give brief summary features, shall ? order use Figma API, need collect two key variables Figma platform, : file key: key (ID) identifies Figma file interested ; token: personal access token; file key collected URL appears access file web browser ( See vignette(\"figma\") details), can create personal access token ‚ÄúSettings‚Äù section Figma platform (See vignette(\"figma\") details). collected two variables, can use figma::get_figma_file() collect data Figma file, like : default, figma::get_figma_file() returns raw contents HTTP response. However, can ask function fit data Figma file tibble object, prefer. Just pass .output_format = \"tibble\" argument function, like : Instead getting data entire Figma file, might need collect data specific page (specific set pages) file. ‚Äôs case, can use figma::get_figma_page() function. order use function, need collect third variable, node ID, , words, ID identifies page interested (See vignette(\"figma\" details collect node ID). collected node ID, get data like : hand, reason, might interested contents Figma file, just metadata . case, can use figma::get_document_info() get kind information, like : See vignette(\"figma\") details complete introduction package.","code":"file_key <- \"hch8YlkIrYbU3raDzjPvCz\" token <- \"My secret and personal access token ...\"  # Returns a `response` object: result <- figma::get_figma_file(   file_key, token ) # Returns a `tibble` object: result <- figma::get_figma_file(   file_key, token,   .output_format = \"tibble\" )  print(result) # A tibble: 5 √ó 7   canvas_id canvas_name canvas_type object_id object_name       object_type object_attributes   <chr>     <chr>       <chr>       <chr>     <chr>             <chr>       <list>            1 0:1       Page 1      CANVAS      1:2       Background        RECTANGLE   <named list [9]>  2 0:1       Page 1      CANVAS      5:2       Paragraph         TEXT        <named list [16]> 3 0:1       Page 1      CANVAS      5:3       Arrow             VECTOR      <named list [9]>  4 5:4       Page 2      CANVAS      5:5       BackgroundPagina2 RECTANGLE   <named list [9]>  5 5:4       Page 2      CANVAS      5:6       Texto da p√°gina 2 TEXT        <named list [16]> node_id <- \"0%3A1\" # Returns a `tibble` object: result <- figma::get_figma_page(   file_key, token, node_id,   .output_format = \"tibble\" )  print(result) # A tibble: 3 √ó 7   canvas_id canvas_name canvas_type object_id object_name object_type object_attributes   <chr>     <chr>       <chr>       <chr>     <chr>       <chr>       <list>            1 0:1       Page 1      CANVAS      1:2       Background  RECTANGLE   <named list [9]>  2 0:1       Page 1      CANVAS      5:2       Paragraph   TEXT        <named list [16]> 3 0:1       Page 1      CANVAS      5:3       Arrow       VECTOR      <named list [9]> result <- figma::get_document_info(   file_key, token )  print(str(result)) List of 13  $ id           : chr \"0:0\"  $ type         : chr \"DOCUMENT\"  $ name         : chr \"Untitled\"  $ components   : Named list()  $ componentSets: Named list()  $ styles       : Named list()  $ schemaVersion: int 0  $ lastModified : chr \"2022-10-29T23:35:08Z\"  $ thumbnailUrl : chr \"https://s3-alpha-sig.figma.com/thumbnails/446f0181-cfeb-49e7-aec2-36c71aa4b05e?Expires=1667779200&Signature=Mnj\"| __truncated__  $ version      : chr \"2539463517\"  $ role         : chr \"owner\"  $ editorType   : chr \"figma\"  $ linkAccess   : chr \"view\""},{"path":"https://pedropark99.github.io/figma/reference/as_figma_document.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a httr response object to a Figma Document object ‚Äî as_figma_document","title":"Convert a httr response object to a Figma Document object ‚Äî as_figma_document","text":"function receives httr::response() object, outputs figma_document object.","code":""},{"path":"https://pedropark99.github.io/figma/reference/as_figma_document.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a httr response object to a Figma Document object ‚Äî as_figma_document","text":"","code":"as_figma_document(response, ...)"},{"path":"https://pedropark99.github.io/figma/reference/as_figma_document.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a httr response object to a Figma Document object ‚Äî as_figma_document","text":"response response object produced httr HTTP method (e.g. httr::GET(), httr::POST(), etc.); ... arguments passed caller. Currently ignored function;","code":""},{"path":"https://pedropark99.github.io/figma/reference/as_figma_document.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a httr response object to a Figma Document object ‚Äî as_figma_document","text":"Returns object class figma_document, R list elements: document: R list document metadata Figma file; canvas: R list canvas objects data Figma file; n_canvas: integer number canvas/pages Figma file; n_objects: vector integers number objects canvas/page Figma file;","code":""},{"path":"https://pedropark99.github.io/figma/reference/as_figma_document.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a httr response object to a Figma Document object ‚Äî as_figma_document","text":"Figma Document just R list organized structure raw content HTTP request httr::response(). can access part list `$` `[[` operators. See Value section understand element list. as_figma_document() call different parsers depending kind elements present content response object receives input. elements define kind data present response object, structured. input object document element top-level content, likely input object produced figma::get_figma_file(). case, as_figma_document() call figma:::parse_figma_file() parse contents HTTP request. hand, input object nodes element top-level content, likely input object produced figma::get_figma_page(). case, as_figma_document() call figma:::parse_figma_page() parse contents HTTP request. none key elements (\"document\" \"nodes\") found top-level content response object, as_figma_document() issue error user, telling recognize source response object.","code":""},{"path":"https://pedropark99.github.io/figma/reference/as_figma_document.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a httr response object to a Figma Document object ‚Äî as_figma_document","text":"","code":"if (FALSE) { file_key <- \"hch8YlkgaUIZ9raDzjPvCz\" token <- \"my figma token secret ... \" # Returns a `response` object: r <- figma::get_figma_file(file_key, token) result <- figma::as_figma_document(r) }"},{"path":"https://pedropark99.github.io/figma/reference/as_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a httr response object to a tibble object ‚Äî as_tibble","title":"Convert a httr response object to a tibble object ‚Äî as_tibble","text":"function receives httr::response() object, outputs tibble::tibble() object.","code":""},{"path":"https://pedropark99.github.io/figma/reference/as_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a httr response object to a tibble object ‚Äî as_tibble","text":"","code":"as_tibble(x, ...)"},{"path":"https://pedropark99.github.io/figma/reference/as_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a httr response object to a tibble object ‚Äî as_tibble","text":"x Figma document object (.e. figma::figma_document object), , httr::response object parse; ... arguments passed caller. simplified argument currently accepted, arguments ignored (See Details section);","code":""},{"path":"https://pedropark99.github.io/figma/reference/as_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a httr response object to a tibble object ‚Äî as_tibble","text":"tibble::tibble() object canvas objects data Figma file.","code":""},{"path":"https://pedropark99.github.io/figma/reference/as_tibble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a httr response object to a tibble object ‚Äî as_tibble","text":"function parses data response object tries fit tibble object. row resulting tibble describing object Figma file. as_tibble() receives response object input, call as_figma_document() convert response object figma_document object. , as_tibble() can receive directly figma_document object jump step. Figma file objects draw specific canvas, as_tibble() return empty tibble object specific canvas. means , Figma file empty, , words, canvas/pages file objects draw , final result as_tibble() empty tibble object. default, figma::as_tibble() include document metadata resulting tibble object. can pass simplified = FALSE function change behavior.","code":""},{"path":"https://pedropark99.github.io/figma/reference/as_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a httr response object to a tibble object ‚Äî as_tibble","text":"","code":"if (FALSE) { file_key <- \"hch8YlkgaUIZ9raDzjPvCz\" token <- \"my figma token secret ... \" # Returns a `response` object: r <- figma::get_figma_file(file_key, token) result <- figma::as_tibble(r)  # To include all of the document metadata, use `simplified = FALSE` result <- figma::as_tibble(r, simplified = FALSE) }"},{"path":"https://pedropark99.github.io/figma/reference/build_query_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a query string from a set of named parameters ‚Äî build_query_string","title":"Build a query string from a set of named parameters ‚Äî build_query_string","text":"Utility function used build query strings (non-exported function).","code":""},{"path":"https://pedropark99.github.io/figma/reference/build_query_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a query string from a set of named parameters ‚Äî build_query_string","text":"","code":"build_query_string(parameters)"},{"path":"https://pedropark99.github.io/figma/reference/build_query_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a query string from a set of named parameters ‚Äî build_query_string","text":"parameters list set key-value pairs compose query string","code":""},{"path":"https://pedropark99.github.io/figma/reference/build_query_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a query string from a set of named parameters ‚Äî build_query_string","text":"single string query string produced.","code":""},{"path":"https://pedropark99.github.io/figma/reference/build_query_string.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build a query string from a set of named parameters ‚Äî build_query_string","text":"function takes set key-value pairs (words, set named arguments), build query string. basically combine (\"collapse\") key-value pairs together, form resulting query string. Logical values (TRUE FALSE) automatically converted lower-case version (\"true\" \"false\"), since versions typically used standard query strings.","code":""},{"path":"https://pedropark99.github.io/figma/reference/build_request_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Build the request URL ‚Äî build_request_url","title":"Build the request URL ‚Äî build_request_url","text":"Add multiple \"components\" base URL, build complete URL used HTTP request (non-exported function).","code":""},{"path":"https://pedropark99.github.io/figma/reference/build_request_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build the request URL ‚Äî build_request_url","text":"","code":"build_request_url(base_url, path = NULL, ...)"},{"path":"https://pedropark99.github.io/figma/reference/build_request_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build the request URL ‚Äî build_request_url","text":"base_url single string base URL want add components ; path vector strings (single string) \"path\" components; ... Key-value pairs compose query string section URL;","code":""},{"path":"https://pedropark99.github.io/figma/reference/build_request_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build the request URL ‚Äî build_request_url","text":"single string complete URL.","code":""},{"path":"https://pedropark99.github.io/figma/reference/build_request_url.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build the request URL ‚Äî build_request_url","text":"function receives input, set pieces (components) URL used HTTP request. , tries combine (\"collapse\") pieces together form single string complete URL. three main types pieces (components) accepted function. First, base URL, initial portion URL. Usually, base URL Figma API. Second, \"path\" components, small bits compose path resource sections URL. element vector given path separated slash character (\"/\") final result. example, give vector c(\"path1\", \"path2\", \"path3\") path, end result structured like : base_url/path1/path2/path3 Third, query string, usually composed set key-value pairs. build_request_url() collects key-value pairs ... argument, , combines pairs together form query string.","code":""},{"path":"https://pedropark99.github.io/figma/reference/default_attrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Default attributes of every Figma node ‚Äî default_attrs","title":"Default attributes of every Figma node ‚Äî default_attrs","text":"Every Figma document represented three nodes, , node different type (e.g. DOCUMENT, CANVAS, TEXT, etc.). However, despite differences type, every node always three default attributes, stored figma::default_attrs object.","code":""},{"path":"https://pedropark99.github.io/figma/reference/default_attrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default attributes of every Figma node ‚Äî default_attrs","text":"","code":"default_attrs"},{"path":"https://pedropark99.github.io/figma/reference/default_attrs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default attributes of every Figma node ‚Äî default_attrs","text":"object class character length 3.","code":""},{"path":"https://pedropark99.github.io/figma/reference/document_attrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Default document attributes of a Figma file ‚Äî document_attrs","title":"Default document attributes of a Figma file ‚Äî document_attrs","text":"Every Figma file default document attributes, , informations describe file, like name, last time modified, etc. default attributes stored figma::document_attrs object.","code":""},{"path":"https://pedropark99.github.io/figma/reference/document_attrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default document attributes of a Figma file ‚Äî document_attrs","text":"","code":"document_attrs"},{"path":"https://pedropark99.github.io/figma/reference/document_attrs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default document attributes of a Figma file ‚Äî document_attrs","text":"object class character length 11.","code":""},{"path":"https://pedropark99.github.io/figma/reference/get_document_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the document metadata of a Figma File from the API ‚Äî get_document_info","title":"Get the document metadata of a Figma File from the API ‚Äî get_document_info","text":"function uses /v1/files/ endpoint Figma API get document metadata particular Figma file, fit R object.","code":""},{"path":"https://pedropark99.github.io/figma/reference/get_document_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the document metadata of a Figma File from the API ‚Äî get_document_info","text":"","code":"get_document_info(file_key, token, .output_format = \"list\")"},{"path":"https://pedropark99.github.io/figma/reference/get_document_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the document metadata of a Figma File from the API ‚Äî get_document_info","text":"file_key string key Figma File want get; token string personal Figma token authenticate API; .output_format output format. Options \"list\" \"tibble\". Defaults \"list\";","code":""},{"path":"https://pedropark99.github.io/figma/reference/get_document_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the document metadata of a Figma File from the API ‚Äî get_document_info","text":"default, get_document_info() returns raw R list document metadata Figma file. can change behavior .output_format = \"tibble\", gives tibble::tibble object.","code":""},{"path":"https://pedropark99.github.io/figma/reference/get_document_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the document metadata of a Figma File from the API ‚Äî get_document_info","text":"may interested contents Figma file, metadata file instead. , want know \"name\" particular Figma file, last time modified, version uses, etc. get_document_info() exists. collects just metadata Figma file, ignores canvas objects data. default, get_document_info() fits metadata raw R list. can change behaviour .output_format argument. .output_format = \"tibble\", get_document_info() fit metadata tibble::tibble object.","code":""},{"path":"https://pedropark99.github.io/figma/reference/get_document_info.html","id":"be-aware-of-possible-http-errors","dir":"Reference","previous_headings":"","what":"Be aware of possible HTTP errors","title":"Get the document metadata of a Figma File from the API ‚Äî get_document_info","text":"get data Figma file, functions figma package make HTTP request Figma API. request can fail number reasons, happen, get_document_info() use report_http_error() raise error report user, kind error message Figma API returned. See vignette(\"http-errors\") details.","code":""},{"path":"https://pedropark99.github.io/figma/reference/get_document_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the document metadata of a Figma File from the API ‚Äî get_document_info","text":"","code":"if (FALSE) { library(figma) file_key <- \"hch8YlkgaUIZ9raDzjPvCz\" token <- \"my figma token secret ... \" # Returns a list with the metadata: result <- figma::get_document_info(file_key, token) # Returns a `tibble` object: result <- figma::get_document_info(   file_key, token,   .output_format = \"tibble\" ) }"},{"path":"https://pedropark99.github.io/figma/reference/get_endpoint_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the URL to a endpoint of Figma API ‚Äî get_endpoint_url","title":"Get the URL to a endpoint of Figma API ‚Äî get_endpoint_url","text":"Get URL endpoint Figma API","code":""},{"path":"https://pedropark99.github.io/figma/reference/get_endpoint_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the URL to a endpoint of Figma API ‚Äî get_endpoint_url","text":"","code":"get_endpoint_url(endpoint = NULL)"},{"path":"https://pedropark99.github.io/figma/reference/get_endpoint_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the URL to a endpoint of Figma API ‚Äî get_endpoint_url","text":"endpoint single string name desired endpoint (needs one values present figma::implemented_endpoints). Defaults NULL;","code":""},{"path":"https://pedropark99.github.io/figma/reference/get_endpoint_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the URL to a endpoint of Figma API ‚Äî get_endpoint_url","text":"string URL given endpoint, , list   implemented endpoints;","code":""},{"path":"https://pedropark99.github.io/figma/reference/get_endpoint_url.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the URL to a endpoint of Figma API ‚Äî get_endpoint_url","text":"function called without arguments, get_endpoint_url() output list implemented endpoints. However, function accepts single string value name , specific endpoint. case, get_endpoint_url() output single string endpoint selected. worth mentioning, string must one values present figma::implemented_endpoints. user provided type value fit description, function prompt user error message.","code":""},{"path":"https://pedropark99.github.io/figma/reference/get_endpoint_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the URL to a endpoint of Figma API ‚Äî get_endpoint_url","text":"","code":"# Returns the URL to the `files` endpoint of Figma API library(figma) figma::get_endpoint_url(\"files\") #> [1] \"https://api.figma.com/v1/files\""},{"path":"https://pedropark99.github.io/figma/reference/get_figma_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data of a Figma File from the API ‚Äî get_figma_file","title":"Get data of a Figma File from the API ‚Äî get_figma_file","text":"function uses /v1/files/ endpoint Figma API get data particular Figma file, fit R object.","code":""},{"path":"https://pedropark99.github.io/figma/reference/get_figma_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data of a Figma File from the API ‚Äî get_figma_file","text":"","code":"get_figma_file(   file_key,   token,   geometry = FALSE,   .output_format = \"response\",   ... )"},{"path":"https://pedropark99.github.io/figma/reference/get_figma_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data of a Figma File from the API ‚Äî get_figma_file","text":"file_key string key Figma File want get; token string personal Figma token authenticate API; geometry boolean value indicating want export vector data. Defaults FALSE; .output_format output format. Options \"response\", \"figma_document\", \"tibble\". Defaults \"response\"; ... arguments passed parse_response_object();","code":""},{"path":"https://pedropark99.github.io/figma/reference/get_figma_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data of a Figma File from the API ‚Äî get_figma_file","text":"default, get_figma_file() parse output API, returns raw response object produced httr HTTP methods (e.g. httr::GET()). can change behavior .output_format argument. .output_format = \"tibble\", tibble::tibble() object returned. .output_format = \"figma_document\", object class figma_document returned (See Details section information).","code":""},{"path":"https://pedropark99.github.io/figma/reference/get_figma_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get data of a Figma File from the API ‚Äî get_figma_file","text":"function can bring data Figma file R. default, get_figma_file() returns `response` object data returned API. , data Figma file, also, data HTTP request. Figma file data content element `response` object. However, default, Figma API returns data raw format (, raw bytes). convert bytes useful object (like JSON object, character vector, list), highly recommended apply httr::content() function content element. Although useful output format (.e. `response` object) (specially brings available data), might want \"formatted\" (friendly) output. case, can use .output_format argument get different output format. .output_format = \"figma_document\", get_figma_file() use figma::as_figma_document() convert `response` object Figma Document object (.e. object class figma_document), returns output. figma_document object, normal R list, data Figma file (See documentation figma::as_figma_document() details). .output_format = \"tibble\", get_figma_file() use figma::as_tibble() parse output API fit tibble::tibble() object. use output format, can also use simplified argument control document metadata present resulting tibble (See examples section). default, simplified set TRUE, get_figma_file() outputs tibble objects data Figma file, corresponding canvas metadata. However, include metadata document per se. words, simplified = TRUE get data objects canvas Figma file, get metadata document. okay, usually need informations. want resulting tibble, pass simplified = FALSE get_figma_file(). want just document metadata (canvas objects data), might want use get_document_info() function instead get_figma_file() (See get_document_info() documentation details).","code":""},{"path":"https://pedropark99.github.io/figma/reference/get_figma_file.html","id":"be-aware-of-possible-http-errors","dir":"Reference","previous_headings":"","what":"Be aware of possible HTTP errors","title":"Get data of a Figma File from the API ‚Äî get_figma_file","text":"get data Figma file, functions figma package make HTTP request Figma API. request can fail number reasons, happen, get_figma_file() use report_http_error() raise error report user, kind error message Figma API returned. See vignette(\"http-errors\") details.","code":""},{"path":[]},{"path":"https://pedropark99.github.io/figma/reference/get_figma_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data of a Figma File from the API ‚Äî get_figma_file","text":"","code":"if (FALSE) { library(figma)  file_key <- \"hch8YlkgaUIZ9raDzjPvCz\" token <- \"my figma token secret ... \"  # Returns a `response` object: result <- figma::get_figma_file(file_key, token)  # Returns a `tibble` object: result <- figma::get_figma_file(   file_key, token, .output_format = \"tibble\" )  # Returns the same `tibble` object as before # but, now, with all the metadata from the # Figma document too: result <- figma::get_figma_file(   file_key, token,   .output_format = \"tibble\",   simplified = FALSE )  # Returns a `figma_document` object: result <- figma::get_figma_file(   file_key, token, .output_format = \"figma_document\" ) }"},{"path":"https://pedropark99.github.io/figma/reference/get_figma_page.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data of a specific canvas/page in a Figma File from the API ‚Äî get_figma_page","title":"Get data of a specific canvas/page in a Figma File from the API ‚Äî get_figma_page","text":"function uses /v1/files/ endpoint Figma API get data specific canvas/page (set canvas/pages) Figma file, fit R object.","code":""},{"path":"https://pedropark99.github.io/figma/reference/get_figma_page.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data of a specific canvas/page in a Figma File from the API ‚Äî get_figma_page","text":"","code":"get_figma_page(   file_key,   token,   node_ids,   geometry = FALSE,   .output_format = \"response\",   ... )"},{"path":"https://pedropark99.github.io/figma/reference/get_figma_page.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data of a specific canvas/page in a Figma File from the API ‚Äî get_figma_page","text":"file_key string key Figma File want get; token string personal Figma token authenticate API; node_ids string node ID (vector strings node IDs); geometry boolean value indicating want export vector data. Defaults FALSE; .output_format output format. Options \"response\", \"figma_document\", \"tibble\". Defaults \"response\"; ... arguments passed parse_response_object();","code":""},{"path":"https://pedropark99.github.io/figma/reference/get_figma_page.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data of a specific canvas/page in a Figma File from the API ‚Äî get_figma_page","text":"default, get_figma_page() parse output API, returns raw response object produced httr HTTP methods (e.g. httr::GET()). can change behavior .output_format argument. .output_format = \"tibble\", tibble::tibble() object returned. .output_format = \"figma_document\", object class figma_document returned (See Details section information).","code":""},{"path":"https://pedropark99.github.io/figma/reference/get_figma_page.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get data of a specific canvas/page in a Figma File from the API ‚Äî get_figma_page","text":"`get_figma_file()` get data objects canvas/pages Figma file. `get_figma_page()` get data objects drawn specific set canvas/pages Figma file. Every canvas/page Figma file, identified node ID. can easily get ID URL appears browser access canvas/page Figma platform (See vignette(\"figma\") details). collected node ID, give node_id argument string. want collect data one canvas/page Figma file, give vector node IDs node_id argument.","code":""},{"path":"https://pedropark99.github.io/figma/reference/get_figma_page.html","id":"be-aware-of-possible-http-errors","dir":"Reference","previous_headings":"","what":"Be aware of possible HTTP errors","title":"Get data of a specific canvas/page in a Figma File from the API ‚Äî get_figma_page","text":"get data Figma file, functions figma package make HTTP request Figma API. request can fail number reasons, happen, get_figma_page() use report_http_error() raise error report user, kind error message Figma API returned. See vignette(\"http-errors\") details.","code":""},{"path":"https://pedropark99.github.io/figma/reference/get_figma_page.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data of a specific canvas/page in a Figma File from the API ‚Äî get_figma_page","text":"","code":"if (FALSE) { library(figma) file_key <- \"hch8YlkgaUIZ9raDzjPvCz\" token <- \"my figma token secret ... \" node_id <- \"0%3A1\" result <- figma::get_figma_page(   file_key, token, node_id ) }"},{"path":"https://pedropark99.github.io/figma/reference/parse_response_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse the response data and fit it into a R object ‚Äî parse_response_object","title":"Parse the response data and fit it into a R object ‚Äî parse_response_object","text":"function usually called get_figma_file(), get_document_info() get_figma_page(), process response object returned httr HTTP methods, httr::GET().","code":""},{"path":"https://pedropark99.github.io/figma/reference/parse_response_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse the response data and fit it into a R object ‚Äî parse_response_object","text":"","code":"parse_response_object(response, .output_format, ...)"},{"path":"https://pedropark99.github.io/figma/reference/parse_response_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse the response data and fit it into a R object ‚Äî parse_response_object","text":"response response object returned httr HTTP methods (e.g. httr::GET()); .output_format string name output format chosen user; ... arguments passed caller;","code":""},{"path":"https://pedropark99.github.io/figma/reference/parse_response_object.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse the response data and fit it into a R object ‚Äî parse_response_object","text":"functions figma package adopts philosophy give, default, raw unprocessed result possible user. , parse_response_object() usually called .output_format = \"response\", makes function just return input . unprocessed raw input gives possible information user (good debugging). information usually messy friendly format, makes harder data analysis transformation pipelines. .output_format argument provide option user choose friendly format. example, .output_format = \"tibble\", parse_response_object() call figma::as_tibble() parse data response object, fit tibble::tibble() object.","code":""},{"path":"https://pedropark99.github.io/figma/reference/quarto_website.html","id":null,"dir":"Reference","previous_headings":"","what":"A representation of a Quarto Website home webpage ‚Äî quarto_website","title":"A representation of a Quarto Website home webpage ‚Äî quarto_website","text":"`quarto_website` object contain data homepage Quarto Website drawn Figma file. words, homepage drawn Figma, , imported R trough figma package.","code":""},{"path":"https://pedropark99.github.io/figma/reference/quarto_website.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A representation of a Quarto Website home webpage ‚Äî quarto_website","text":"","code":"quarto_website"},{"path":"https://pedropark99.github.io/figma/reference/quarto_website.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A representation of a Quarto Website home webpage ‚Äî quarto_website","text":"object class response, produced httr HTTP methods (e.g. httr::GET());","code":""},{"path":"https://pedropark99.github.io/figma/reference/quarto_website.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A representation of a Quarto Website home webpage ‚Äî quarto_website","text":"Figma file contains single page/canvas, HTML component separate object Figma file. name object page/canvas correspond CSS selector used style HTML component real Quarto Website. interesting structure, can use name attributes object build custom CSS code, maybe matches style webpage. worth mentioning, quarto_website object httr::response object returned figma::get_figma_file(). httr::response object just simple R list class response. elements list description : url: URL used HTTP request made Figma API; status_code: HTTP status code returned Figma API; headers all_headers: list headers returned Figma API; cookies: named list cookies returned Figma API; content: body response, raw vector. See httr::content() various ways parse content; date times: Timing information HTTP request made Figma API; handle: handle associated url; request: URL, HTTP method options used HTTP request made Figma API; data Figma file stored content element. However, data raw format (.e. raw bytes). convert raw bytes useful format like R list, string, use httr::content() function. See vignette(\"figma\") detailed description data present content element;","code":""},{"path":"https://pedropark99.github.io/figma/reference/quarto_website.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A representation of a Quarto Website home webpage ‚Äî quarto_website","text":"","code":"library(figma) str(quarto_website) #> List of 10 #>  $ url        : chr \"https://api.figma.com/v1/files/Y7jJJ5KHcG7hjuZVeRPZWq\" #>  $ status_code: int 200 #>  $ headers    :List of 14 #>   ..$ content-type                : chr \"application/json; charset=utf-8\" #>   ..$ transfer-encoding           : chr \"chunked\" #>   ..$ connection                  : chr \"keep-alive\" #>   ..$ date                        : chr \"Thu, 08 Dec 2022 11:56:48 GMT\" #>   ..$ access-control-allow-origin : chr \"*\" #>   ..$ access-control-allow-headers: chr \"Content-Type, X-Figma-Token, Authorization\" #>   ..$ cache-control               : chr \"no-cache, no-store\" #>   ..$ vary                        : chr \"X-Figma-Token,Authorization\" #>   ..$ x-cache                     : chr \"Miss from cloudfront\" #>   ..$ via                         : chr \"1.1 52f920f33acb1140004f09dd7ec8ef94.cloudfront.net (CloudFront)\" #>   ..$ x-amz-cf-pop                : chr \"GRU1-C1\" #>   ..$ alt-svc                     : chr \"h3=\\\":443\\\"; ma=86400\" #>   ..$ x-amz-cf-id                 : chr \"lYluVe85gAqAWDyUEAtBV_mb5IkHmz8p_4q9qMVJ79-wFAtqF3HG_g==\" #>   ..$ strict-transport-security   : chr \"max-age=31536000; includeSubDomains; preload\" #>   ..- attr(*, \"class\")= chr [1:2] \"insensitive\" \"list\" #>  $ all_headers:List of 1 #>   ..$ :List of 3 #>   .. ..$ status : int 200 #>   .. ..$ version: chr \"HTTP/1.1\" #>   .. ..$ headers:List of 14 #>   .. .. ..$ content-type                : chr \"application/json; charset=utf-8\" #>   .. .. ..$ transfer-encoding           : chr \"chunked\" #>   .. .. ..$ connection                  : chr \"keep-alive\" #>   .. .. ..$ date                        : chr \"Thu, 08 Dec 2022 11:56:48 GMT\" #>   .. .. ..$ access-control-allow-origin : chr \"*\" #>   .. .. ..$ access-control-allow-headers: chr \"Content-Type, X-Figma-Token, Authorization\" #>   .. .. ..$ cache-control               : chr \"no-cache, no-store\" #>   .. .. ..$ vary                        : chr \"X-Figma-Token,Authorization\" #>   .. .. ..$ x-cache                     : chr \"Miss from cloudfront\" #>   .. .. ..$ via                         : chr \"1.1 52f920f33acb1140004f09dd7ec8ef94.cloudfront.net (CloudFront)\" #>   .. .. ..$ x-amz-cf-pop                : chr \"GRU1-C1\" #>   .. .. ..$ alt-svc                     : chr \"h3=\\\":443\\\"; ma=86400\" #>   .. .. ..$ x-amz-cf-id                 : chr \"lYluVe85gAqAWDyUEAtBV_mb5IkHmz8p_4q9qMVJ79-wFAtqF3HG_g==\" #>   .. .. ..$ strict-transport-security   : chr \"max-age=31536000; includeSubDomains; preload\" #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"insensitive\" \"list\" #>  $ cookies    :'data.frame':\t0 obs. of  7 variables: #>   ..$ domain    : logi(0)  #>   ..$ flag      : logi(0)  #>   ..$ path      : logi(0)  #>   ..$ secure    : logi(0)  #>   ..$ expiration: 'POSIXct' num(0)  #>   ..$ name      : logi(0)  #>   ..$ value     : logi(0)  #>  $ content    : raw [1:11493] 7b 22 64 6f ... #>  $ date       : POSIXct[1:1], format: \"2022-12-08 11:56:48\" #>  $ times      : Named num [1:6] 0 0.0568 0.0756 0.16 1.7616 ... #>   ..- attr(*, \"names\")= chr [1:6] \"redirect\" \"namelookup\" \"connect\" \"pretransfer\" ... #>  $ request    :List of 6 #>   ..$ method    : chr \"GET\" #>   ..$ url       : chr \"https://api.figma.com/v1/files/Y7jJJ5KHcG7hjuZVeRPZWq\" #>   ..$ fields    : NULL #>   ..$ options   :List of 2 #>   .. ..$ useragent: chr \"libcurl/7.64.1 r-curl/4.3.3 httr/1.4.4\" #>   .. ..$ httpget  : logi TRUE #>   ..$ auth_token: NULL #>   ..$ output    : list() #>   .. ..- attr(*, \"class\")= chr [1:2] \"write_memory\" \"write_function\" #>   ..- attr(*, \"class\")= chr \"request\" #>  $ handle     :Class 'curl_handle' <externalptr>  #>  - attr(*, \"class\")= chr \"response\""},{"path":"https://pedropark99.github.io/figma/reference/select_any_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Select any of the elements in a object ‚Äî select_any_of","title":"Select any of the elements in a object ‚Äî select_any_of","text":"Safely select elements named object (like named R list).","code":""},{"path":"https://pedropark99.github.io/figma/reference/select_any_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select any of the elements in a object ‚Äî select_any_of","text":"","code":"select_any_of(x, elements)"},{"path":"https://pedropark99.github.io/figma/reference/select_any_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select any of the elements in a object ‚Äî select_any_of","text":"x object names attribute (usually named R list); elements vector strings name elements search ;","code":""},{"path":"https://pedropark99.github.io/figma/reference/select_any_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select any of the elements in a object ‚Äî select_any_of","text":"subset x finds elements described  element argument.","code":""},{"path":"https://pedropark99.github.io/figma/reference/select_any_of.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select any of the elements in a object ‚Äî select_any_of","text":"functions works similar way dplyr::any_of(). tries select element x vector given user elements argument. words, user gives vector c(\"\", \"c\", \"e\"), select_any_of() search elements \"\", \"c\" \"e\" x object, select elements finds . dplyr::any_of() designed work columns data.frame, figma::select_any_of() designed work specially elements named list (although can used select columns data.frames well).","code":""},{"path":"https://pedropark99.github.io/figma/reference/untitled_file.html","id":null,"dir":"Reference","previous_headings":"","what":"An example of a simple Figma file ‚Äî untitled_file","title":"An example of a simple Figma file ‚Äî untitled_file","text":"untitled_file object example kind object functions figma package tend return user. object produced call figma::get_figma_file(), contains data simple Figma file entitled \"Untitled\".","code":""},{"path":"https://pedropark99.github.io/figma/reference/untitled_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An example of a simple Figma file ‚Äî untitled_file","text":"","code":"untitled_file"},{"path":"https://pedropark99.github.io/figma/reference/untitled_file.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An example of a simple Figma file ‚Äî untitled_file","text":"object class response, produced httr HTTP methods (e.g. httr::GET());","code":""},{"path":"https://pedropark99.github.io/figma/reference/untitled_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An example of a simple Figma file ‚Äî untitled_file","text":"\"Untitled\" Figma file two canvas/pages, called \"Page 1\" \"Page 2\". three objects drawn Page 1 (RECTANGLE, TEXT VECTOR object), , two objects drawn Page 2 (RECTANGLE TEXT object). untitled_file object contains httr::response object returned figma::get_figma_file(). httr::response object just simple R list class response. elements list description : url: URL used HTTP request made Figma API; status_code: HTTP status code returned Figma API; headers all_headers: list headers returned Figma API; cookies: named list cookies returned Figma API; content: body response, raw vector. See httr::content() various ways parse content; date times: Timing information HTTP request made Figma API; handle: handle associated url; request: URL, HTTP method options used HTTP request made Figma API; data Figma file stored content element. However, data raw format (.e. raw bytes). convert raw bytes useful format like R list, string, use httr::content() function. See vignette(\"figma\") detailed description data present content element;","code":""},{"path":"https://pedropark99.github.io/figma/reference/untitled_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An example of a simple Figma file ‚Äî untitled_file","text":"","code":"library(figma) str(untitled_file) #> List of 10 #>  $ url        : chr \"https://api.figma.com/v1/files/hch8YlkIrYbU3raDzjPvCz\" #>  $ status_code: int 200 #>  $ headers    :List of 12 #>   ..$ content-type                : chr \"application/json; charset=utf-8\" #>   ..$ date                        : chr \"Sat, 29 Oct 2022 16:56:50 GMT\" #>   ..$ access-control-allow-origin : chr \"*\" #>   ..$ access-control-allow-headers: chr \"Content-Type, X-Figma-Token, Authorization\" #>   ..$ cache-control               : chr \"no-cache, no-store\" #>   ..$ vary                        : chr \"X-Figma-Token,Authorization\" #>   ..$ x-cache                     : chr \"Miss from cloudfront\" #>   ..$ via                         : chr \"1.1 88c333921d5c405e037b84bb8c2dc33e.cloudfront.net (CloudFront)\" #>   ..$ x-amz-cf-pop                : chr \"GRU3-P1\" #>   ..$ alt-svc                     : chr \"h3=\\\":443\\\"; ma=86400\" #>   ..$ x-amz-cf-id                 : chr \"gjOnBhIpDZxekWpx-zbAwqxsOLunePv8LSTfdf-elMQNLXpyAVSuXw==\" #>   ..$ strict-transport-security   : chr \"max-age=31536000; includeSubDomains; preload\" #>   ..- attr(*, \"class\")= chr [1:2] \"insensitive\" \"list\" #>  $ all_headers:List of 1 #>   ..$ :List of 3 #>   .. ..$ status : int 200 #>   .. ..$ version: chr \"HTTP/2\" #>   .. ..$ headers:List of 12 #>   .. .. ..$ content-type                : chr \"application/json; charset=utf-8\" #>   .. .. ..$ date                        : chr \"Sat, 29 Oct 2022 16:56:50 GMT\" #>   .. .. ..$ access-control-allow-origin : chr \"*\" #>   .. .. ..$ access-control-allow-headers: chr \"Content-Type, X-Figma-Token, Authorization\" #>   .. .. ..$ cache-control               : chr \"no-cache, no-store\" #>   .. .. ..$ vary                        : chr \"X-Figma-Token,Authorization\" #>   .. .. ..$ x-cache                     : chr \"Miss from cloudfront\" #>   .. .. ..$ via                         : chr \"1.1 88c333921d5c405e037b84bb8c2dc33e.cloudfront.net (CloudFront)\" #>   .. .. ..$ x-amz-cf-pop                : chr \"GRU3-P1\" #>   .. .. ..$ alt-svc                     : chr \"h3=\\\":443\\\"; ma=86400\" #>   .. .. ..$ x-amz-cf-id                 : chr \"gjOnBhIpDZxekWpx-zbAwqxsOLunePv8LSTfdf-elMQNLXpyAVSuXw==\" #>   .. .. ..$ strict-transport-security   : chr \"max-age=31536000; includeSubDomains; preload\" #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"insensitive\" \"list\" #>  $ cookies    :'data.frame':\t0 obs. of  7 variables: #>   ..$ domain    : logi(0)  #>   ..$ flag      : logi(0)  #>   ..$ path      : logi(0)  #>   ..$ secure    : logi(0)  #>   ..$ expiration: 'POSIXct' num(0)  #>   ..$ name      : logi(0)  #>   ..$ value     : logi(0)  #>  $ content    : raw [1:4582] 7b 22 64 6f ... #>  $ date       : POSIXct[1:1], format: \"2022-10-29 16:56:50\" #>  $ times      : Named num [1:6] 0 0.173 0.275 0.378 1.606 ... #>   ..- attr(*, \"names\")= chr [1:6] \"redirect\" \"namelookup\" \"connect\" \"pretransfer\" ... #>  $ request    :List of 5 #>   ..$ method : chr \"GET\" #>   ..$ url    : chr \"https://api.figma.com/v1/files/hch8YlkIrYbU3raDzjPvCz\" #>   ..$ fields : NULL #>   ..$ options:List of 2 #>   .. ..$ useragent: chr \"libcurl/7.68.0 r-curl/4.3.2 httr/1.4.3\" #>   .. ..$ httpget  : logi TRUE #>   ..$ output : list() #>   .. ..- attr(*, \"class\")= chr [1:2] \"write_memory\" \"write_function\" #>   ..- attr(*, \"class\")= chr \"request\" #>  $ handle     :Class 'curl_handle' <externalptr>  #>  - attr(*, \"class\")= chr \"response\""},{"path":"https://pedropark99.github.io/figma/news/index.html","id":"figma-020","dir":"Changelog","previous_headings":"","what":"figma 0.2.0","title":"figma 0.2.0","text":"new data object called quarto_website added package (see help(quarto_website) details); new vignette added package (see vignette(\"quarto-css\")). vignette demonstrates can use Figma API data build CSS code; Unit tests added package protect code;","code":""},{"path":"https://pedropark99.github.io/figma/news/index.html","id":"figma-010","dir":"Changelog","previous_headings":"","what":"figma 0.1.0","title":"figma 0.1.0","text":"CRAN release: 2022-11-02 Added NEWS.md file track changes package.","code":""}]
